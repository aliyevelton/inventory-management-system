@model EditSaleViewModel
@using Inventory_Management_System.Enums
@{
    ViewBag.Title = "Edit Sale";
}

<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Edit Sale</h4>
            <h6>Update sale information</h6>
        </div>
    </div>

    <form asp-action="Edit" method="post">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.AppUserId)

        <div class="card">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-lg-4 col-sm-6 col-12">
                        <label asp-for="Reference" class="form-label">Reference</label>
                        @Html.TextBoxFor(m => m.Reference, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Reference, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-lg-4 col-sm-6 col-12">
                        <label asp-for="SaleDate" class="form-label">Sale Date</label>
                        @Html.TextBoxFor(m => m.SaleDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        @Html.ValidationMessageFor(m => m.SaleDate, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-lg-4 col-sm-6 col-12">
                        <label asp-for="DiscountAmount" class="form-label">Discount Amount</label>
                        @Html.TextBoxFor(m => m.DiscountAmount, new { @class = "form-control", type = "number", step = "0.01", min = "0" })
                        @Html.ValidationMessageFor(m => m.DiscountAmount, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-lg-4 col-sm-6 col-12">
                        <label asp-for="PaymentMethod" class="form-label">Payment Method</label>
                        @{
                            var paymentMethods = Enum.GetValues(typeof(Inventory_Management_System.Enums.PaymentMethod))
                            .Cast<Inventory_Management_System.Enums.PaymentMethod>()
                            .Select(pm => new SelectListItem
                            {
                                Text = pm.ToString(),
                                Value = ((int)pm).ToString(),
                                Selected = pm == Model.PaymentMethod
                            }).ToList(); 
                          }
                            <select asp-for="PaymentMethod" class="form-select" asp-items="paymentMethods">
                                <option value="">- Select Payment Method -</option>
                            </select>
                            @Html.ValidationMessageFor(m => m.PaymentMethod, "", new { @class = "text-danger" })

                    </div>
                </div>

                <h5 class="mt-4 mb-2">Sale Items</h5>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th style="width: 100px;">Quantity</th>
                            <th style="width: 120px;">Unit Price</th>
                            <th style="width: 120px;">Total Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.SaleItems.Count; i++)
                        {
                            var item = Model.SaleItems[i];

                            <tr>
                                <td style="display: flex; align-items: center; gap: 10px;">
                                    <img src="~/assets/img/product/@item.ProductImageFileName"
                                         alt="Product Image"
                                         style="width:40px; height:40px; object-fit: cover; border-radius: 4px;" />
                                    <span>@Model.SaleItems[i].ProductName</span>
                                    @Html.HiddenFor(m => m.SaleItems[i].ProductId)
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.SaleItems[i].Quantity, new { @class = "form-control", type = "number", min = "1" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.SaleItems[i].UnitPrice, new { @class = "form-control", type = "number", step = "0.01", min = "0" })
                                </td>
                                <td>
                                    <input type="text" class="form-control total-price" readonly />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="mt-4">
                    <button type="submit" class="btn btn-submit me-2">Save Changes</button>
                    <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-cancel">Cancel</a>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            function updateTotalPrice(row) {
                const qtyInput = row.querySelector('input[name$=".Quantity"]');
                const priceInput = row.querySelector('input[name$=".UnitPrice"]');
                const totalPriceInput = row.querySelector('.total-price');

                const quantity = parseFloat(qtyInput.value) || 0;
                const unitPrice = parseFloat(priceInput.value) || 0;
                const total = (quantity * unitPrice).toFixed(2);

                totalPriceInput.value = total;
            }

            // Initial calculation on page load
            document.querySelectorAll('tbody tr').forEach(row => updateTotalPrice(row));

            // Update total price when quantity or unit price changes
            document.querySelectorAll('input[name$=".Quantity"], input[name$=".UnitPrice"]').forEach(input => {
                input.addEventListener('input', (e) => {
                    const row = e.target.closest('tr');
                    updateTotalPrice(row);
                });
            });
        });
    </script>
}
